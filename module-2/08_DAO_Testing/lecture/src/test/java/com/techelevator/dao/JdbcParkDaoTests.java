package com.techelevator.dao;

import com.techelevator.model.Park;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class JdbcParkDaoTests extends BaseDaoTests {

    private static final Park PARK_1 =
            new Park(1, "Park 1", LocalDate.parse("1800-01-02"), 100, true);
    private static final Park PARK_2 =
            new Park(2, "Park 2", LocalDate.parse("1900-12-31"), 200, false);
    private static final Park PARK_3 =
            new Park(3, "Park 3", LocalDate.parse("2000-06-15"), 300, false);

    private Park testPark;
    private JdbcParkDao sut;

    @Before
    public void setup() {

        testPark = new Park(-1, "TestPark", LocalDate.parse("1984-01-02"), 999, true);

        sut = new JdbcParkDao(dataSource);

    }

    @Test
    public void getPark_returns_correct_park_for_id() {
        //Arrange
        //Done in the above/before sections

        //Act
        Park result = sut.getPark(1);

        //Assert
        assertParksMatch(PARK_1, result);

        //Act
        Park result2 = sut.getPark(2);

        //Assert
        assertParksMatch(PARK_2, result2);

        //Act
        Park result3 = sut.getPark(3);

        //Assert
        assertParksMatch(PARK_3, result3);

    }

    @Test
    public void getPark_returns_null_when_id_not_found() {
        //Arrange
        //Done in the above/before sections

        //Act
        Park result = sut.getPark(100);

        //Assert
        Assert.assertNull(result);

    }

    @Test
    public void getParksByState_returns_all_parks_for_state_AA() {
        //Arrange
        List<Park> parks = new ArrayList<>();

        //Act
        parks = sut.getParksByState("AA");

        //Assert
        Assert.assertEquals(2, parks.size());
        assertParksMatch(PARK_1, parks.get(0));
        assertParksMatch(PARK_3, parks.get(1));

    }

    @Test
    public void getParksByState_returns_all_parks_for_state_BB() {
        //Arrange
        List<Park> parks = new ArrayList<>();

        //Act
        parks = sut.getParksByState("BB");

        //Assert
        Assert.assertEquals(1, parks.size());
        assertParksMatch(PARK_2, parks.get(0));

    }

    @Test
    public void getParksByState_returns_all_parks_for_state_CC() {
        //Arrange
        List<Park> parks = new ArrayList<>();

        //Act
        parks = sut.getParksByState("CC");

        //Assert
        Assert.assertEquals(1, parks.size());
        assertParksMatch(PARK_3, parks.get(0));

    }

    @Test
    public void getParksByState_returns_empty_list_for_abbreviation_not_in_db() {
        //Arrange
        List<Park> parks = new ArrayList<>();

        //Act
        parks = sut.getParksByState("ZZ");

        //Assert
        Assert.assertEquals(0, parks.size());
    }

    @Test
    public void createPark_returns_park_with_id_and_expected_values() {
        //Arrange
        Park testPark = new Park(-1, "TestPark", LocalDate.parse("1984-01-02"), 999, true);

        //Act
        Park result = sut.createPark(testPark);
        testPark.setParkId(result.getParkId()); //Make sure testPark id matches id generated by database

        //Assert
        assertParksMatch(testPark, result);

    }

    @Test
    public void created_park_has_expected_values_when_retrieved() {
        //Arrange
        Park createdPark = sut.createPark(testPark); //Can initialize above in before to make testing easier

        //Act
        Integer newId = createdPark.getParkId();
        Park retrievedPark = sut.getPark(newId);

        //Assert
        assertParksMatch(createdPark, retrievedPark);

    }

    @Test
    public void updated_park_has_expected_values_when_retrieved_1() {
        //Arrange
        Park parkToUpdate = sut.getPark(1);

        parkToUpdate.setParkName("Updated");
        parkToUpdate.setArea(999);
        parkToUpdate.setDateEstablished(LocalDate.parse("1884-01-02"));
        parkToUpdate.setHasCamping(true);

        //Act
        sut.updatePark(parkToUpdate);
        Park retrievedPark = sut.getPark(1);

        //Assert
        assertParksMatch(parkToUpdate, retrievedPark);

    }

    @Test
    public void updated_park_has_expected_values_when_retrieved_2() {
        //Arrange
        Park parkToUpdate = sut.getPark(2);

        parkToUpdate.setParkName("Updated");
        parkToUpdate.setArea(999);
        parkToUpdate.setDateEstablished(LocalDate.parse("1884-01-02"));
        parkToUpdate.setHasCamping(true);

        //Act
        sut.updatePark(parkToUpdate);
        Park retrievedPark = sut.getPark(2);

        //Assert
        assertParksMatch(parkToUpdate, retrievedPark);

    }

    @Test
    public void updated_park_has_expected_values_when_retrieved_3() {
        //Arrange
        Park parkToUpdate = sut.getPark(3);

        parkToUpdate.setParkName("Updated");
        parkToUpdate.setArea(999);
        parkToUpdate.setDateEstablished(LocalDate.parse("1884-01-02"));
        parkToUpdate.setHasCamping(true);

        //Act
        sut.updatePark(parkToUpdate);
        Park retrievedPark = sut.getPark(3);

        //Assert
        assertParksMatch(parkToUpdate, retrievedPark);

    }

    @Test
    public void deleted_park_cant_be_retrieved() {
        //Arrange
        sut.deletePark(1);

        //Act
        Park retrievedPark = sut.getPark(1);

        //Assert
        Assert.assertNull(retrievedPark);
    }

    @Test
    public void park_added_to_state_is_in_list_of_parks_by_state() {
        //Arrange
        Park createdPark = sut.createPark(testPark);

        //Act
        sut.addParkToState(createdPark.getParkId(), "AA");
        List<Park> getStateParks = sut.getParksByState("AA");

        //Assert
        Assert.assertEquals(3, getStateParks.size());
        assertParksMatch(PARK_1, getStateParks.get(0));
        assertParksMatch(PARK_3, getStateParks.get(1));
        assertParksMatch(createdPark, getStateParks.get(2));

    }

    @Test
    public void park_removed_from_state_is_not_in_list_of_parks_by_state() {
        //Arrange
        sut.deletePark(2);

        //Act
        List<Park> parksByState = sut.getParksByState("BB");

        //Assert
        Assert.assertEquals(0, parksByState.size());

    }


    //Create a method, so you don't have to write the same code over and over (!!DRY!!)
    private void assertParksMatch(Park expected, Park actual) {
        Assert.assertEquals(expected.getParkId(), actual.getParkId());
        Assert.assertEquals(expected.getParkName(), actual.getParkName());
        Assert.assertEquals(expected.getDateEstablished(), actual.getDateEstablished());
        Assert.assertEquals(expected.getArea(), actual.getArea(), 0.1);
        Assert.assertEquals(expected.getHasCamping(), actual.getHasCamping());
    }

}
